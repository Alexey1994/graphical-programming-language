{"types":[{"name":"16","type":{"primitiveTypeIndex":0,"value":16}},{"name":"8","type":{"primitiveTypeIndex":0,"value":8}},{"name":"звезда","type":{"primitiveTypeIndex":2,"value":[{"name":"увв"}]}},{"name":"16","type":{"primitiveTypeIndex":0,"value":16}},{"name":"8","type":{"primitiveTypeIndex":0,"value":8}},{"name":"звезда","type":{"primitiveTypeIndex":2,"value":[{}]}},{"name":"й","type":{"primitiveTypeIndex":2,"value":[{"name":"123"}]}},{"name":"у","type":{"primitiveTypeIndex":2,"value":[{"name":"123"}]}},{"name":"ы","type":{"primitiveTypeIndex":2,"value":[{"name":"фф"}]}},{"name":"е","type":{"primitiveTypeIndex":2,"value":[{"name":"фф"}]}},{"name":"111","type":{"primitiveTypeIndex":2,"value":[{"name":"ф"}]}},{"name":"й","type":{"primitiveTypeIndex":2,"value":[{"name":"й"}]}},{"name":"ф","type":{"primitiveTypeIndex":2,"value":[{"name":"ф"}]}},{"name":"у","type":{"primitiveTypeIndex":2,"value":[{"name":"ы"}]}},{"name":"м","type":{"primitiveTypeIndex":2,"value":[{"name":"а"},{"name":"б"}]}}],"constants":[{"name":"смайл","typeIndex":1,"value":1},{"name":"адрес текстового вывода","typeIndex":0,"value":753664},{"name":"два смайла","typeIndex":0,"value":1234},{"name":"123","typeIndex":1,"value":0}],"functions":[{"name":"старт программы","arguments":[],"combinations":[{"variables":[],"combination":[],"body":[{"functionIndex":3,"arguments":[{"constantIndex":0}]},{"functionIndex":3,"arguments":[{"constantIndex":2}]},{"functionIndex":2,"arguments":[]}],"translate":""}]},{"name":"копировать","arguments":[{"label":"из","name":"a"},{"label":"в","name":"b"}],"combinations":[{"variables":[],"combination":[null,null],"body":[],"translate":"//console.log(rootCombination.variables[arguments[0].variableIndex])\n\nconsole.log(arguments)\n\nvar destination\n\nif(typeof arguments[1].variableIndex !== 'undefined')\n    destination = rootCombination.variables[ arguments[1].variableIndex ]\nelse if(typeof arguments[1].constantIndex !== 'undefined')\n    destination = constants[ arguments[1].constantIndex ]\n\n\nconsole.log(destination)\n\nvar source\n\nif(typeof arguments[0].variableIndex !== 'undefined'){\n    source = rootCombination.variables[arguments[0].variableIndex]\n}\nelse if(typeof arguments[0].constantIndex !== 'undefined'){\n\n    source = constants[arguments[0].constantIndex]\n\n    //pop ax\n    //pop bx\n\n    if(typeof arguments[1].variableIndex !== 'undefined') {\n        out.write(0x67); out.write(0xC7); out.write(0x45); //mov word [ebp+variableIndex * 2], constantValue\n            out.write(arguments[1].variableIndex * 2);\n            out.write(source.value % 255); out.write((source.value / 255) % 255);\n    }\n    else if(typeof arguments[1].constantIndex !== 'undefined') {\n        out.write(0xC6); out.write(0x06); //mov byte[constantValue], constantValue\n            //out.write(arguments[1].variableIndex * 2);\n            out.write(destination.value % 255); out.write((destination.value / 255) % 255);\n            out.write(source.value % 255);\n    }\n}\n\n\nif(typeof source.type == 'undefined'){\n    console.log('error: variable ' + source.name + ' is undefined')\n}\n\n//var source = rootCombination.variables[arguments[0].variableIndex]\n\ndestination.type = source.type\n//arguments[1].type = arguments[0].type\n\n//console.log(destination)\n//console.log(source)\n\n"}]},{"name":"остановиться","arguments":[],"combinations":[{"variables":[],"combination":[],"body":[],"translate":"out.write(0xF4)\n"}]},{"name":"вывести символ","arguments":[{"label":"","name":"с"}],"combinations":[{"variables":[],"combination":[1],"body":[],"translate":"var character\nvar value\n\nif(typeof arguments[0].constantIndex !== 'undefined') {\n    character = constants[arguments[0].constantIndex]\n    value = character.value\n}\n\nout.write(0xBB); out.write(0x00); out.write(0x00); //mov bx, 0\nout.write(0xB9); out.write(0x01); out.write(0x00); //mov cx, 1\nout.write(0xB4); out.write(0x0E);                  //mov ah, 0x0E\nout.write(0xB0); out.write(value);                 //mov al, value\nout.write(0xCD); out.write(0x10);                  //int 10h\n\nconsole.log('write character')"},{"variables":[],"combination":[0],"body":[],"translate":"var character\nvar value\n\nif(typeof arguments[0].constantIndex !== 'undefined') {\n    character = constants[arguments[0].constantIndex]\n    value = character.value\n}\n\nout.write(0xBB); out.write(0x00); out.write(0x00); //mov bx, 0\nout.write(0xB9); out.write(0x01); out.write(0x00); //mov cx, 1\nout.write(0xB4); out.write(0x0E);                  //mov ah, 0x0E\n\nout.write(0xB0); out.write(value % 256);           //mov al, value\nout.write(0xCD); out.write(0x10);                  //int 10h\n\nout.write(0xB0); out.write(value / 256 % 256);     //mov al, value\nout.write(0xCD); out.write(0x10);                  //int 10h\n\nconsole.log('write 2 characters')"}]},{"name":"f","arguments":[{"label":"","name":"x"},{"label":"","name":"y"}],"combinations":[{"variables":[],"combination":[null,null],"body":[],"translate":"//call\nvar address = (combination.beginAddress - out.address - 4 + 1) & 65535\nout.write(0xE8);\n    out.write(address % 256); out.write((address / 256) % 256);\nout.write(0x50);\n\n//jump\nif(typeof call.branch !== 'undefined'){\n    address = (body[call.branch].beginAddress - out.address - 7) & 65535\n\n    out.write(0x83); out.write(0xF8); //cmp ax, 0\n        out.write(0x00);\n                                \n    out.write(0x0F); out.write(0x84); //je address\n        out.write(address % 256); out.write((address / 256) % 256);\n}"},{"variables":[],"combination":[1,0],"body":[],"translate":"//call\nvar address = (combination.beginAddress - out.address - 4 + 1) & 65535\nout.write(0xE8);\n    out.write(address % 256); out.write((address / 256) % 256);\nout.write(0x50);\n\n//jump\nif(typeof call.branch !== 'undefined'){\n    address = (body[call.branch].beginAddress - out.address - 7) & 65535\n\n    out.write(0x83); out.write(0xF8); //cmp ax, 0\n        out.write(0x00);\n                                \n    out.write(0x0F); out.write(0x84); //je address\n        out.write(address % 256); out.write((address / 256) % 256);\n}"}]},{"name":"plus","arguments":[{"label":"","name":"a"},{"label":"","name":"b"}],"combinations":[{"variables":[],"combination":[1,1],"body":[],"translate":"out.write(0x58) //pop ax\nout.write(0x5B) //pop bx\nout.write(0x01); out.write(0xD8) //add bx, ax"}]}]}